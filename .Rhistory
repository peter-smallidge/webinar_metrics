x <- gsub("[\u201C\u201D]", "\"", x) # “ ” to "
x <- gsub("[\u2018\u2019]", "'", x)  # ‘ ’ to '
# Optional: if you want to fix en-dashes/em-dashes too:
# x <- gsub("\u2013|\u2014", "--", x) # – and — to double dash
}
x
})
return(df)
}
summary_page_clean <- escape_latex_chars(summary_page)
summary_table <- kable(summary_page_clean, caption = "Summary of Webinar Metrics") %>%
kable_styling(full_width = FALSE, position = "center",
latex_options = c("striped", "hold_position")) %>%
#add_header_above(c(" " = 2)) %>%   # Add space to header if needed
row_spec(0, bold = TRUE, font_size = 14) %>%  # Optional: styling header row
row_spec(1:nrow(summary_page_clean), hline_after = TRUE)  # Add horizontal lines after each row
save_kable(summary_table, "table_summary_page_clean.pdf")
general_clean <- escape_latex_chars(general)
general_table <- kable(general_clean, caption = "General Comments by Survey Respondents") %>%
kable_styling(full_width = FALSE, position = "center",
latex_options = c("striped", "hold_position")) %>%
add_header_above(c(" " = 2)) %>%   # Add space to header if needed
row_spec(0, bold = TRUE, font_size = 14) %>%  # Optional: styling header row
row_spec(1:nrow(general_clean), hline_after = TRUE) %>%   # Add horizontal lines after each row
column_spec(1, width = "5cm") %>%
column_spec(2, width = "10cm")
save_kable(summary_table, "table_general_page_clean.pdf")
actions_clean <- escape_latex_chars(actions)
summary_actions <- kable(actions_clean, caption = "Actions Intended by Survey Respondents as a Result of the Webinar") %>%
kable_styling(full_width = FALSE, position = "center",
latex_options = c("striped", "hold_position")) %>%
add_header_above(c(" " = 2)) %>%   # Add space to header if needed
row_spec(0, bold = TRUE, font_size = 14) %>%  # Optional: styling header row
row_spec(1:nrow(actions_clean), hline_after = TRUE) %>%   # Add horizontal lines after each row
column_spec(2, width = "10cm")
save_kable(summary_actions, "table_actions_page_clean.pdf")
View(summ_partic)
View(summ_partic)
View(summ_perspective1)
summ_perspective1 <- input_zoom %>%
group_by(perspective) %>%  # Group by perspective
summarize(
count_attended = n(),  # Count the number of rows for each perspective
pct_perspective = (count_attended / nrow(filter(attended == "Yes"))) * 100
# Calculate percentage for each group_by
) %>%
mutate_if(is.numeric, round, 0) %>%
arrange(perspective)  # Sort by perspective alphabetically
summ_perspective1 <- input_zoom %>%
group_by(perspective) %>%  # Group by perspective
summarize(
count_attended = n(),  # Count the number of rows for each perspective
#    pct_perspective = (count_attended / nrow(filter(attended == "Yes"))) * 100
# Calculate percentage for each group_by
) %>%
mutate_if(is.numeric, round, 0) %>%
arrange(perspective)  # Sort by perspective alphabetically
summ_perspective1 <- input_zoom %>%
group_by(perspective) %>%  # Group by perspective
summarize(
count_attended = n(),  # Count the number of rows for each perspective
pct_perspective = (count_attended / nrow((attended == "Yes"))) * 100
# Calculate percentage for each group_by
) %>%
mutate_if(is.numeric, round, 0) %>%
arrange(perspective)  # Sort by perspective alphabetically
#determine total number of attended
total_attended <- input_zoom %>%
filter(attended == "Yes") %>%
nrow()
#determine total number of attended
total_attended <- input_zoom %>%
filter(attended == "Yes") %>%
nrow()
summ_perspective1 <- input_zoom %>%
filter(attended == "Yes") %>%  # Keep only those who attended
group_by(perspective) %>%
summarize(count_attended = n()) %>%
mutate(
pct_perspective = round((count_attended / total_attended) * 100, 0)
) %>%
arrange(perspective)  # Sort by perspective alphabetically
summ_perspective1 <- input_zoom %>%
filter(attended == "Yes") %>%  # Keep only those who attended
group_by(perspective) %>%
summarize(count_attended = n())
summ_perspective1 <- input_zoom %>%
#  filter(attended == "Yes") %>%  # Keep only those who attended
group_by(perspective) %>%
summarize(count_attended = n())
#determine total number of attended
total_attended <- input_zoom %>%
filter(attended == "yes") %>%
nrow()
summ_perspective1 <- input_zoom %>%
filter(attended == "yes") %>%  # Keep only those who attended
group_by(perspective) %>%
summarize(count_attended = n()) %>%
mutate(
pct_perspective = round((count_attended / total_attended) * 100, 0)
) %>%
arrange(perspective)  # Sort by perspective alphabetically
summ_perspective2 <- bind_rows(summ_perspective1, missing_perspectives) %>%
group_by(perspective) %>%
summarize(
Perspective_pct = sum(pct_perspective)
) %>%
rename(
Metric = perspective,
Impact = Perspective_pct
) %>%
drop_na(Metric) %>%
mutate(
Impact = as.character(Impact)
) %>%
mutate(
sequence = c("F", "G", "H", "I", "J", "K", "L", "M", "N", "O")
)
summ_ceu <- CEU_1 %>%
summarize(
CEU_requested = n()
) %>%
pivot_longer(c(CEU_requested), names_to = "Metric", values_to = "Impact") %>%
mutate(
Impact = as.character(Impact)
) %>%
mutate(
sequence = c("W")
)
exit_metrics <- input_qualtrics %>%
select(perspective, acres, awareness, knowledge, action, general_comment, miles, dollars) %>%
summarize(
Survey_respondents = n(),
acres_qualtrics = sum(acres, na.rm = TRUE),
Miles_equivalent = sum(miles, na.rm = TRUE),
Action_intended_count = sum(!is.na(action)),
Action_pct = (Action_intended_count / Survey_respondents) * 100,
Financial_impact = sum(dollars, na.rm = TRUE),
Awareness_pct = sum(awareness %in% c("high", "mod_high", "moderate")) /
sum(awareness %in% c("high", "mod_high", "moderate", "min_mod", "minimal")) * 100,
Knowledge_pct = sum(knowledge %in% c("high", "mod_high", "moderate")) /
sum(awareness %in% c("high", "mod_high", "moderate", "min_mod", "minimal")) * 100
) %>%
mutate_if(is.numeric, round, 0) %>%
mutate(
acres_qualtrics = scales::comma(acres_qualtrics),
Miles_equivalent = scales::comma(Miles_equivalent),
Financial_impact = scales::comma(Financial_impact)
) %>%
mutate(
Survey_respondents = as.character(Survey_respondents),
Action_intended_count = as.character(Action_intended_count),
Action_pct = as.character(Action_pct),
Awareness_pct = as.character(Awareness_pct),
Knowledge_pct = as.character(Knowledge_pct)
) %>%
pivot_longer(c(Survey_respondents, acres_qualtrics, Miles_equivalent, Action_intended_count, Action_pct,
Financial_impact, Awareness_pct, Knowledge_pct),
names_to = "Metric", values_to = "Impact") %>%
mutate(
sequence = c("C", "E", "U", "Q", "R", "V", "S", "T")
)
summary_page <- bind_rows(summ_partic, summ_perspective2, summ_ceu, exit_metrics) %>%
arrange(sequence) %>%
select(Metric, Impact) %>%
mutate(Metric = recode(Metric,
"Registered" = "Number Registered",
"Participants_gtr20min" = "Participants > 20 minutes",
"Survey_respondents" = "Number of Survey Respondents",
"Total_Acres_gtr20min" = "Total Forested Acres (> 20 minutes)",
"acres_qualtrics" = "Total Forested Acres (Qualtrics respondents)",
"Agency or Institution" = "Agency or Institution (% participants)",
"Educator" = "Educator (% participants)",
"Forester" = "Forester (% participants)",
"Grazier" = "Grazier or Farmer (% participants)",
"Logger/Forest Practitioner" = "Logger/Forest Practitioner (% participants)",
"Maple Producer" = "Maple Producer (% participants)",
"NGO" = "NGO (% participants)",
"Natural Resources Specialist" = "Natural Resources Specialist (% participants)",
"Other" = "Other (% participants)",
"Woodland Owner" = "Woodland Owner (% participants)",
"States_Provinces" = "Number of States/Provinces",
"Action_intended_count" = "# Respondents Intending Actions",
"Action_pct" = "% Respondents Intending Actions",
"Awareness_pct" = "% Respondents with > Moderate Change in Awareness",
"Knowledge_pct" = "% Respondents with > Moderate Change in Knowledge",
"Miles_equivalent" = "Total Mileage Equivalent for Travel to a Comparable Seminar",
"Financial_impact" = "Estimate of Money to be Earned, Saved or Spent",
"CEU_requested" = "Number of CEU Requests"
)
)
output_file_summary <- file.path(output_folder, paste0(webinar_name, "_summary.xlsx"))
# Write the formatted summary metrics to the data frame of the specified path
write_xlsx(summary_page, output_file_summary)
actions <- input_qualtrics %>%
select(perspective, action)%>%
drop_na(action) %>%
rename(
"Perspective" = "perspective",
"Intended Action"  = "action"
) %>%
arrange(Perspective)
View(actions)
general <- input_qualtrics %>%
select(perspective, general_comment)%>%
drop_na(general_comment) %>%
filter(!general_comment == "None" | general_comment == "none") %>%
rename(
"Perspective" = "perspective",
"General Comments"  = "general_comment"
) %>%
arrange(Perspective)
View(general)
df[] <- lapply(df, function(x) {
if (is.character(x)) {
# Escape LaTeX special characters
x <- gsub("%", "\\\\%", x)
x <- gsub("&", "\\\\&", x)
x <- gsub("#", "\\\\#", x)
x <- gsub("_", "\\\\_", x)
x <- gsub("\\$", "\\\\$", x)
x <- gsub("\\!", "\\\\!", x)
x <- gsub("\\{", "\\\\{", x)
x <- gsub("\\}", "\\\\}", x)
# Fix curly quotes
x <- gsub("[\u201C\u201D]", "\"", x) # “ ” to "
x <- gsub("[\u2018\u2019]", "'", x)  # ‘ ’ to '
# Optional: if you want to fix en-dashes/em-dashes too:
# x <- gsub("\u2013|\u2014", "--", x) # – and — to double dash
}
x
})
summary_page_clean <- escape_latex_chars(summary_page)
summary_table <- kable(summary_page_clean, caption = "Summary of Webinar Metrics") %>%
kable_styling(full_width = FALSE, position = "center",
latex_options = c("striped", "hold_position")) %>%
#add_header_above(c(" " = 2)) %>%   # Add space to header if needed
row_spec(0, bold = TRUE, font_size = 14) %>%  # Optional: styling header row
row_spec(1:nrow(summary_page_clean), hline_after = TRUE)  # Add horizontal lines after each row
save_kable(summary_table, "table_summary_page_clean.pdf")
general_clean <- escape_latex_chars(general)
general_table <- kable(general_clean, caption = "General Comments by Survey Respondents") %>%
kable_styling(full_width = FALSE, position = "center",
latex_options = c("striped", "hold_position")) %>%
add_header_above(c(" " = 2)) %>%   # Add space to header if needed
row_spec(0, bold = TRUE, font_size = 14) %>%  # Optional: styling header row
row_spec(1:nrow(general_clean), hline_after = TRUE) %>%   # Add horizontal lines after each row
column_spec(1, width = "5cm") %>%
column_spec(2, width = "10cm")
save_kable(summary_table, "table_general_page_clean.pdf")
general_table <- kable(general_clean, caption = "General Comments by Survey Respondents") %>%
kable_styling(full_width = FALSE, position = "center",
latex_options = c("striped", "hold_position")) %>%
add_header_above(c(" " = 2)) %>%   # Add space to header if needed
row_spec(0, bold = TRUE, font_size = 14) %>%  # Optional: styling header row
row_spec(1:nrow(general_clean), hline_after = TRUE) %>%   # Add horizontal lines after each row
column_spec(1, width = "5cm") %>%
column_spec(2, width = "10cm")
save_kable(general_table, "table_general_page_clean.pdf")
actions_clean <- escape_latex_chars(actions)
summary_actions <- kable(actions_clean, caption = "Actions Intended by Survey Respondents as a Result of the Webinar") %>%
kable_styling(full_width = FALSE, position = "center",
latex_options = c("striped", "hold_position")) %>%
add_header_above(c(" " = 2)) %>%   # Add space to header if needed
row_spec(0, bold = TRUE, font_size = 14) %>%  # Optional: styling header row
row_spec(1:nrow(actions_clean), hline_after = TRUE) %>%   # Add horizontal lines after each row
column_spec(2, width = "10cm")
save_kable(summary_actions, "table_actions_page_clean.pdf")
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_chunk$set(message = FALSE)
knitr::opts_chunk$set(warning = FALSE)
library(readxl)
library(readr)
#library(skimr)
library(tidyr)
library(tidyverse)
#library(tidytable)  ## CAUTION this may conflict with dplyr functions
library(ggplot2)
library(ggpubr)
library(dplyr)
#install.packages("writexl")
library(writexl)
library(scales)
#install.packages(lubridate)
library(lubridate)
#tinytex::install_tinytex()
#install.packages("tinytex")
library(tinytex)
#install.packages("kableExtra")
library(kableExtra)
#install.packages("webshot2")
library(webshot2)
#install.packages("rmarkdown")
# Create Paths
#in the console, type:   file.choose(), select the file, and then paste the path into the code below.
file_path_registration <- "C:\\Users\\pjs23\\Documents\\Projects\\CCE\\Webinar Data and Files\\webinar evaluation montly summary\\2025.data.attend.exit\\2025_06_19_Nyland_interferencep\\2025_may_21_registration.xlsx"
file_path_attendee <- "C:\\Users\\pjs23\\Documents\\Projects\\CCE\\Webinar Data and Files\\webinar evaluation montly summary\\2025.data.attend.exit\\2025_06_19_Nyland_interference\\2025_may_21_attendee_details.xlsx"
file_path_qualtrics <- "C:\\Users\\pjs23\\Documents\\Projects\\CCE\\Webinar Data and Files\\webinar evaluation montly summary\\2025.data.attend.exit\\2025_06_19_Nyland_interference\\2025_05_21_qualtrics.xlsx"
webinar_name <- "2025_06_19_Nyland_interference"
output_folder <- "C:/Users/pjs23/Documents/Projects/CCE/Webinar Data and Files/webinar evaluation montly summary/2025.data.attend.exit/2025_06_19_Nyland_interference"
# Create Paths
#in the console, type:   file.choose(), select the file, and then paste the path into the code below.
file_path_registration <- "C:\\Users\\pjs23\\Documents\\Projects\\CCE\\Webinar Data and Files\\webinar evaluation montly summary\\2025.data.attend.exit\\2025_06_19_Nyland_interferencep\\2025_may_21_registration.xlsx"
file_path_zoom <- "C:\\Users\\pjs23\\Documents\\Projects\\CCE\\Webinar Data and Files\\webinar evaluation montly summary\\2025.data.attend.exit\\2025_06_19_Nyland_interference\\2025_may_21_attendee_details.xlsx"
file_path_qualtrics <- "C:\\Users\\pjs23\\Documents\\Projects\\CCE\\Webinar Data and Files\\webinar evaluation montly summary\\2025.data.attend.exit\\2025_06_19_Nyland_interference\\2025_05_21_qualtrics.xlsx"
webinar_name <- "2025_06_19_Nyland_interference"
output_folder <- "C:/Users/pjs23/Documents/Projects/CCE/Webinar Data and Files/webinar evaluation montly summary/2025.data.attend.exit/2025_06_19_Nyland_interference"
input_zoom <- read_excel(file_path_zoom, sheet = "full_cleaned", skip = 0)
# Create Paths
#in the console, type:   file.choose(), select the file, and then paste the path into the code below.
# file_path_registration <- "C:\\Users\\pjs23\\Documents\\Projects\\CCE\\Webinar Data and Files\\webinar evaluation montly summary\\2025.data.attend.exit\\2025_06_19_Nyland_interferencep\\2025_may_21_registration.xlsx"
file_path_zoom <- "C:\\Users\\pjs23\\Documents\\Projects\\CCE\\Webinar Data and Files\\webinar evaluation montly summary\\2025.data.attend.exit\\2025_06_19_Nyland_interference\\2025_06_nyland_interference_raw.xlsx"
file_path_qualtrics <- "C:\\Users\\pjs23\\Documents\\Projects\\CCE\\Webinar Data and Files\\webinar evaluation montly summary\\2025.data.attend.exit\\2025_06_19_Nyland_interference\\2025_05_21_qualtrics.xlsx"
webinar_name <- "2025_06_19_Nyland_interference"
output_folder <- "C:/Users/pjs23/Documents/Projects/CCE/Webinar Data and Files/webinar evaluation montly summary/2025.data.attend.exit/2025_06_19_Nyland_interference"
input_zoom <- read_excel(file_path_zoom, sheet = "full_cleaned", skip = 0)
input_zoom <- read_excel(file_path_zoom, sheet = "full_cleaned", skip = 0) %>%
mutate(join = format(join, "%H:%M")) %>%
mutate(leave = format(leave, "%H:%M")) %>%
mutate(acres = str_remove_all(acres, "[,\\+ ]")) %>%
#removes those characters from the acres varaible
mutate(acres = if_else(
str_detect(acres, "-"),
str_extract(acres, "(?<=-)[0-9]+"),  # Extract the number after the hyphen
acres
)) %>%
mutate(
acres = as.numeric(acres)
) %>%
mutate(across(everything(), ~ gsub("%", "\\\\%", .x))) %>%
mutate(across(everything(), ~ gsub("&", "\\\\&", .x))) %>%
mutate(across(everything(), ~ gsub("#", "\\\\#", .x))) %>%
mutate(across(everything(), ~ gsub("_", "\\\\_", .x))) %>%
mutate(across(everything(), ~ gsub("\\$", "\\\\$", .x)))
input_zoom <- read_excel(file_path_zoom, sheet = "full_cleaned", skip = 0) %>%
mutate(join = format(join, "%H:%M"))
glimpse(input_zoom)
input_zoom <- read_excel(file_path_zoom, sheet = "full_cleaned", skip = 0) %>%
mutate(
join = ifelse(!is.na(join), format(parse_date_time(join, orders = c("HMS", "HM")), "%H:%M"), NA),
leave = ifelse(!is.na(leave), format(parse_date_time(leave, orders = c("HMS", "HM")), "%H:%M"), NA)
)
input_zoom <- read_excel(file_path_zoom, sheet = "full_cleaned", skip = 0) %>%
mutate(
join = ifelse(!is.na(join), format(parse_date_time(join, orders = c("HMS", "HM")), "%H:%M"), NA),
leave = ifelse(!is.na(leave), format(parse_date_time(leave, orders = c("HMS", "HM")), "%H:%M"), NA)
) %>%
mutate(acres = str_remove_all(acres, "[,\\+ ]")) %>%
#removes those characters from the acres varaible
mutate(acres = if_else(
str_detect(acres, "-"),
str_extract(acres, "(?<=-)[0-9]+"),  # Extract the number after the hyphen
acres
)) %>%
mutate(
acres = as.numeric(acres)
) %>%
mutate(across(everything(), ~ gsub("%", "\\\\%", .x))) %>%
mutate(across(everything(), ~ gsub("&", "\\\\&", .x))) %>%
mutate(across(everything(), ~ gsub("#", "\\\\#", .x))) %>%
mutate(across(everything(), ~ gsub("_", "\\\\_", .x))) %>%
mutate(across(everything(), ~ gsub("\\$", "\\\\$", .x)))
CEU_1 <- input_zoom %>%
select( email, first, last, postal, state, join, leave, duration, ceu) %>%
filter(!str_detect(ceu, "do not want or need")) %>%
#    filter(! attended == "No") %>%
arrange(ceu, last)
input_zoom <- read_excel(file_path_zoom, sheet = "full_cleaned", skip = 0) %>%
mutate(
join = ifelse(!is.na(join), format(parse_date_time(join, orders = c("HMS", "HM")), "%H:%M"), NA),
leave = ifelse(!is.na(leave), format(parse_date_time(leave, orders = c("HMS", "HM")), "%H:%M"), NA)
) %>%
mutate(acres = str_remove_all(acres, "[,\\+ ]")) %>%
#removes those characters from the acres varaible
mutate(acres = if_else(
str_detect(acres, "-"),
str_extract(acres, "(?<=-)[0-9]+"),  # Extract the number after the hyphen
acres
)) %>%
mutate(
acres = as.numeric(acres)
) %>%
mutate(across(everything(), ~ gsub("%", "\\\\%", .x))) %>%
mutate(across(everything(), ~ gsub("&", "\\\\&", .x))) %>%
mutate(across(everything(), ~ gsub("#", "\\\\#", .x))) %>%
mutate(across(everything(), ~ gsub("_", "\\\\_", .x))) %>%
mutate(across(everything(), ~ gsub("\\$", "\\\\$", .x)))
CEU_1 <- input_zoom %>%
select( email, first, last, postal, state, join, leave, duration, ceu) %>%
filter(!str_detect(ceu, "do not want or need")) %>%
#    filter(! attended == "No") %>%
arrange(ceu, last)
# Construct the full file path
output_file_ceu <- file.path(output_folder, paste0(webinar_name, "_CEU_1.xlsx"))
# Write the CEU_1 data frame to the specified path
write_xlsx(CEU_1, output_file_ceu)
CEU_1 <- input_zoom %>%
select( email, first, last, postal, state, join, leave, duration, ceu) %>%
filter(!str_detect(ceu, "do not want or need")) %>%
filter(! attended == "No") %>%
arrange(ceu, last)
CEU_1 <- input_zoom %>%
select( attended, email, first, last, postal, state, join, leave, duration, ceu) %>%
filter(!str_detect(ceu, "do not want or need")) %>%
filter(! attended == "No") %>%
arrange(ceu, last) %>%
select(email, first, last, postal, state, join, leave, duration, ceu)
# Construct the full file path
output_file_ceu <- file.path(output_folder, paste0(webinar_name, "_CEU_1.xlsx"))
# Write the CEU_1 data frame to the specified path
write_xlsx(CEU_1, output_file_ceu)
input_zoom <- read_excel(file_path_zoom, sheet = "full_cleaned", skip = 0) %>%
mutate(
join = ifelse(!is.na(join),
format(parse_date_time(join, orders = "I:M p"), "%I:%M %p"),
NA),
leave = ifelse(!is.na(leave),
format(parse_date_time(leave, orders = "I:M p"), "%I:%M %p"),
NA)
) %>%
mutate(acres = str_remove_all(acres, "[,\\+ ]")) %>%
#removes those characters from the acres varaible
mutate(acres = if_else(
str_detect(acres, "-"),
str_extract(acres, "(?<=-)[0-9]+"),  # Extract the number after the hyphen
acres
)) %>%
mutate(
acres = as.numeric(acres)
) %>%
mutate(across(everything(), ~ gsub("%", "\\\\%", .x))) %>%
mutate(across(everything(), ~ gsub("&", "\\\\&", .x))) %>%
mutate(across(everything(), ~ gsub("#", "\\\\#", .x))) %>%
mutate(across(everything(), ~ gsub("_", "\\\\_", .x))) %>%
mutate(across(everything(), ~ gsub("\\$", "\\\\$", .x)))
CEU_1 <- input_zoom %>%
select( attended, email, first, last, postal, state, join, leave, duration, ceu) %>%
filter(!str_detect(ceu, "do not want or need")) %>%
filter(! attended == "No") %>%
arrange(ceu, last) %>%
select(email, first, last, postal, state, join, leave, duration, ceu)
# Construct the full file path
output_file_ceu <- file.path(output_folder, paste0(webinar_name, "_CEU_1.xlsx"))
# Write the CEU_1 data frame to the specified path
write_xlsx(CEU_1, output_file_ceu)
unique(input_zoom$join)
input_zoom <- read_excel(file_path_zoom, sheet = "full_cleaned", skip = 0)
unique(input_zoom$join)
input_zoom <- read_excel(file_path_zoom, sheet = "full_cleaned", skip = 0) %>%
mutate(
join = ifelse(
!is.na(join),
format(parse_date_time(join, orders = "I:M:S p"), "%I:%M %p"),
NA
),
leave = ifelse(
!is.na(leave),
format(parse_date_time(leave, orders = "I:M:S p"), "%I:%M %p"),
NA
)) %>%
mutate(acres = str_remove_all(acres, "[,\\+ ]")) %>%
#removes those characters from the acres varaible
mutate(acres = if_else(
str_detect(acres, "-"),
str_extract(acres, "(?<=-)[0-9]+"),  # Extract the number after the hyphen
acres
)) %>%
mutate(
acres = as.numeric(acres)
) %>%
mutate(across(everything(), ~ gsub("%", "\\\\%", .x))) %>%
mutate(across(everything(), ~ gsub("&", "\\\\&", .x))) %>%
mutate(across(everything(), ~ gsub("#", "\\\\#", .x))) %>%
mutate(across(everything(), ~ gsub("_", "\\\\_", .x))) %>%
mutate(across(everything(), ~ gsub("\\$", "\\\\$", .x)))
View(input_zoom)
CEU_1 <- input_zoom %>%
select( attended, email, first, last, postal, state, join, leave, duration, ceu) %>%
filter(!str_detect(ceu, "do not want or need")) %>%
filter(! attended == "No") %>%
arrange(ceu, last) %>%
select(email, first, last, postal, state, join, leave, duration, ceu)
# Construct the full file path
output_file_ceu <- file.path(output_folder, paste0(webinar_name, "_CEU_1.xlsx"))
# Write the CEU_1 data frame to the specified path
write_xlsx(CEU_1, output_file_ceu)
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_chunk$set(message = FALSE)
knitr::opts_chunk$set(warning = FALSE)
library(readxl)
library(readr)
#library(skimr)
library(tidyr)
library(tidyverse)
#library(tidytable)  ## CAUTION this may conflict with dplyr functions
library(ggplot2)
library(ggpubr)
library(dplyr)
#install.packages("writexl")
library(writexl)
library(scales)
#install.packages(lubridate)
library(lubridate)
#tinytex::install_tinytex()
#install.packages("tinytex")
library(tinytex)
#install.packages("kableExtra")
library(kableExtra)
#install.packages("webshot2")
library(webshot2)
#install.packages("rmarkdown")
git init
